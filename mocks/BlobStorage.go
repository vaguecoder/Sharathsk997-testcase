// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mfsvc "....mfsvc"
	mock "github.com/stretchr/testify/mock"

	storageblob "...../internal/satellite/tiles/storageblob"
)

// BlobStorage is an autogenerated mock type for the BlobStorage type
type BlobStorage struct {
	mock.Mock
}

// DownloadBlob provides a mock function with given fields: ctx, fileName, serveResourceLogMsg
func (_m *BlobStorage) DownloadBlob(ctx context.Context, fileName string, serveResourceLogMsg mfsvc.LogMessage) (storageblob.BlobDetails, error) {
	ret := _m.Called(ctx, fileName, serveResourceLogMsg)

	var r0 storageblob.BlobDetails
	if rf, ok := ret.Get(0).(func(context.Context, string, mfsvc.LogMessage) storageblob.BlobDetails); ok {
		r0 = rf(ctx, fileName, serveResourceLogMsg)
	} else {
		r0 = ret.Get(0).(storageblob.BlobDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, mfsvc.LogMessage) error); ok {
		r1 = rf(ctx, fileName, serveResourceLogMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastModifiedFromBlob provides a mock function with given fields: ctx, fileName, logMsg
func (_m *BlobStorage) GetLastModifiedFromBlob(ctx context.Context, fileName string, logMsg mfsvc.LogMessage) (string, error) {
	ret := _m.Called(ctx, fileName, logMsg)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, mfsvc.LogMessage) string); ok {
		r0 = rf(ctx, fileName, logMsg)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, mfsvc.LogMessage) error); ok {
		r1 = rf(ctx, fileName, logMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBlob provides a mock function with given fields: fileName, blobDetails
func (_m *BlobStorage) UploadBlob(fileName string, blobDetails storageblob.BlobDetails) {
	_m.Called(fileName, blobDetails)
}

type mockConstructorTestingTNewBlobStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlobStorage creates a new instance of BlobStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlobStorage(t mockConstructorTestingTNewBlobStorage) *BlobStorage {
	mock := &BlobStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
