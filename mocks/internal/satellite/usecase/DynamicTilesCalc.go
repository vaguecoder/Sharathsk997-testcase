// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mfsvc "..........gat...../mfsvc"
	mock "github.com/stretchr/testify/mock"

	presenter ".........nternal/satellite/api/presenter"
)

// DynamicTilesCalc is an autogenerated mock type for the DynamicTilesCalc type
type DynamicTilesCalc struct {
	mock.Mock
}

// CreateMapFeatureResponse provides a mock function with given fields: ctx, foundTiles, compressionType, logMsg
func (_m *DynamicTilesCalc) CreateMapFeatureResponse(ctx context.Context, foundTiles []*presenter.MfsTiles, compressionType string, logMsg mfsvc.LogMessage) (*presenter.MapfeatureResponse, error) {
	ret := _m.Called(ctx, foundTiles, compressionType, logMsg)

	var r0 *presenter.MapfeatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, []*presenter.MfsTiles, string, mfsvc.LogMessage) *presenter.MapfeatureResponse); ok {
		r0 = rf(ctx, foundTiles, compressionType, logMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*presenter.MapfeatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*presenter.MfsTiles, string, mfsvc.LogMessage) error); ok {
		r1 = rf(ctx, foundTiles, compressionType, logMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDynamicTilesCalc interface {
	mock.TestingT
	Cleanup(func())
}

// NewDynamicTilesCalc creates a new instance of DynamicTilesCalc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDynamicTilesCalc(t mockConstructorTestingTNewDynamicTilesCalc) *DynamicTilesCalc {
	mock := &DynamicTilesCalc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
